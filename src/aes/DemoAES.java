package aes;

import java.math.BigInteger;
import java.util.HashMap;


public class DemoAES {
	
//	public static void main(String[] args) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
//			IllegalBlockSizeException, BadPaddingException {
//		
//		/* change key 8bit*/
////		String SECRET_KEY = "0123456789abcdef0123456789abcdef";
//		String SECRET_KEY = "5f5e1f20b4a333f8cdf1f04251ac0f93300bf1a9ce5b5436cd4b47b0c6a1ffab";
//		String original = "74656d70657261747572657c7c73696c7665727c7c633035303165376563343064363637383862996437399235353035393564376234373162663134643431646362623139633732653536333064323935383032657c7c39353832376162343832643766306532363431356638656262333532646163397c7c34306432653930363638303435386534376232356431373038363164336463346362313932616436353433366162306239643738653233383061623863626630";
//		String binary
//		String hex = "5437794f7832696f4258376d724a314a2f4d706d595a636578687751392f767757307762386c4a4d4356775a73706658664339796e364733776d582f725630517035574f66386f756e71693666775a6b336a6c716e316f30337149786c737550423049454c7359776d4e646b6d616b5a586f6a2b663171703434375248394752484d5a3347395279347366366e5947684b4547576d4f4e7341656449765a667437626832367946715a734e626379554a68715167335632594978697a41636542675a4e3938615363683673764770575958747163484241656c6356674b73747a594a67754e52746239666f443475394a6563716f74535a51694966526847485a39664b64713542563155493870654c727237784f4761674b50642b7a69464e664c47666f3541316b7275325963413467444443332f56574d57706164794e734d716273766e784675696843684d664a5147326a796f4d794c30486d324963572f61753348686d61787744657a70714b514b4831596c6b307263757553785656794b5839423956753478677865346f5a4f685939313478664b4f356f3658305435766a38464a74354d6a71746157725562386f7231534d7264492b474c744c7358423464634e4d70624a5637437a6e41344763334546446e322b6343447153363845566378386e506d3274447050517841624d4c51744452394b49515142774146";
//		float total=0;
//		SecretKeySpec skeySpec;
//		for (int i = 0; i < 64; i++) {
////			skeySpec = new SecretKeySpec(hexStringToByteArray(SECRET_KEY), "AES");
//			skeySpec = new SecretKeySpec(hexStringToByteArray(ChangeAddBit(SECRET_KEY, i, 2)), "AES");
////			System.out.println(i+" key "+(ChangeAddBit(SECRET_KEY, i, 2)));
//			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
//			cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
//			byte[] byteEncrypted = cipher.doFinal(original.getBytes());
//			String encrypted = Base64.getEncoder().encodeToString(byteEncrypted);
//			
////			System.out.println("encrypt: "+toHex(encrypted));
//			String ciphertextHex = hexToBinary((toHex(encrypted)));
////			System.out.println("ciphertextHex binary: "+ciphertextHex);
////			total +=CompareBit(ciphertextHex,binary);
//			total +=CompareBit(toHex(encrypted),hex);
//			i++;
//			
//			cipher.init(Cipher.DECRYPT_MODE, skeySpec);
//			byte[] byteDecrypted = cipher.doFinal(byteEncrypted);
//			String decrypted = new String(byteDecrypted);
//		
//		
//		
////		/* change plaint 8bit*/
//////		String SECRET_KEY = "0123456789abcdef0123456789abcdef";
////		
////		String kzz = "5f5e1f20b4a333f8cdf1f04251ac0f93300bf1a9ce5b5436cd4b47b0c6a1ffab";
////		byte[] SECRET_KEY = hexStringToByteArray(kzz);
////		
////		String original = "74656d70657261747572657c7c73696c7665727c7c633035303165376563343064363637383862996437399235353035393564376234373162663134643431646362623139633732653536333064323935383032657c7c39353832376162343832643766306532363431356638656262333532646163397c7c34306432653930363638303435386534376232356431373038363164336463346362313932616436353433366162306239643738653233383061623863626630";
////		String binary
////		String hex = "51503463394a6d794e7151454745475a2b2f33396c67697543734345524334676e76695948684253367678664d6d7534674d55482f34306d427752316878736f6f546643493479432f4c4e6c764862772f706a4f7543556c666b572f316c76534e4e42326b57736a6a666b50746e7832454565586f715435654764763334357a39777a72534356764f636954565672487953707554625255346251487954352b572f70434432686966507851516242647573496a6e4647377879486449502f4364336a375847306c6763633039776e57326268416b46694c4e674c4d50314c4f78544a685261466e576b3846316367416e6552757772485a712f793248484a51";
////		float total=0;
////		SecretKeySpec skeySpec = new SecretKeySpec(SECRET_KEY, "AES");
//////		System.out.println(" length "+SECRET_KEY.getBytes().length);
////		for (int i = 0; i < 16; i++) {
//////			System.out.println(i+" plaintext "+ChangeAddBit(original, i, 2));
////			Cipher cipher = Cipher.getInstance("AES/ECB/PKCS5PADDING");
////			cipher.init(Cipher.ENCRYPT_MODE, skeySpec);
////			byte[] byteEncrypted = cipher.doFinal(hexStringToByteArray(ChangeAddBit(original, i, 2)));//hexStringToByteArray(ChangeAddBit(original, i, 2))
////			String encrypted = Base64.getEncoder().encodeToString(byteEncrypted);
////			
//////			System.out.println("encrypt: "+toHex(encrypted));
////			System.out.println(toHex(encrypted));
////			String ciphertextHex = hexToBinary((toHex(encrypted)));
//////			System.out.println("ciphertextHex binary: "+ciphertextHex);
//////			total +=CompareBit(ciphertextHex,binary);
//////			total +=CompareBit(toHex(encrypted),hex);
////			i++;
////			
////			cipher.init(Cipher.DECRYPT_MODE, skeySpec);
////			byte[] byteDecrypted = cipher.doFinal(byteEncrypted);
////			String decrypted = new String(byteDecrypted);
//		
//		}
//	}
	
	public static void main(String[] args) {
		
//		String kzz = "5f5e1f20b4a333f8cdf1f04251ac0f93";//300bf1a9ce5b5436cd4b47b0c6a1ffab
		String kzz = "2475A2B33475568831E2120013AA5487";//300bf1a9ce5b5436cd4b47b0c6a1ffab
		byte[] Kz =hexStringToByteArray(kzz);
		String cleartext1 = "74656d70657261747572657c7c73696c7665727c7c633035303165376563343064363637383862996437399235353035393564376234373162663134643431646362623139633732653536333064323935383032657c7c39353832376162343832643766306532363431356638656262333532646163397c7c34306432653930363638303435386534376232356431373038363164336463346362313932616436353433366162306239643738653233383061623863626630";
		AESEngine Aes = new AESEngine();
		 
		Aes.init(true, new KeyParameter(Kz));
		
		byte[] ciphertext = new byte[hexStringToByteArray(cleartext1).length];
		int index=0;
		while(index<(ciphertext.length-Aes.getBlockSize())) {
		Aes.processBlock(hexStringToByteArray(cleartext1), index, ciphertext, index);
		index+=Aes.getBlockSize();
		}
		
		//process rest bytes
		byte[] block = new byte[Aes.getBlockSize()];
		System.arraycopy(hexStringToByteArray(cleartext1), index, block, 0, hexStringToByteArray(cleartext1).length-index);
		System.out.println("block: "+toHex(block));
		Aes.processBlock(block, 0, block, 0);
		System.out.println("block: "+toHex(block));
		System.arraycopy(block, 0, ciphertext, index, hexStringToByteArray(cleartext1).length-index);
		
		
		System.out.println("ciphertext: "+toHex(ciphertext));
	}
	
	

	/* Transform a byte array in an hexadecimal string */
	private static String toHex(byte[] data) {
		StringBuilder sb = new StringBuilder();
		for (byte b : data) {
			sb.append(String.format("%02x", b & 0xff));
		}
		return sb.toString();
	}

	/*
	 * Transform an hexadecimal string in byte array (It works if the string only
	 * contains the hexadecimal characters)
	 */
	private static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}

	/* Convert a string representation in its hexadecimal string */
	private static String toHex(String arg) {
		return String.format("%02x", new BigInteger(1, arg.getBytes()));
	}


	static float CompareBit(String Str1, String Str2) {
		float Count = 0, a;
		if (Str1.length() == Str2.length()) {
			for (int i = 0; i < Str1.length(); i++) {
				if (Str1.charAt(i) == Str2.charAt(i))
					++Count;
			}
		} else {
			System.out.println("Length Str1 != Str2!");
		}
		a = ((Str1.length() - Count) / (Str1.length())) * 100;
//		System.out.println("so ki tu khac nhau: " + (Str1.length()-Count));
//		System.out.println("tong so ki tu: " + Str1.length());
//		System.out.println("ty le thay doi ban ma: " + a);
		System.out.println(a);
		return a;
	}

	// num la so bit can thay num*4=so bit can thay. addr la vi tri bat dau thay
	static String ChangeAddBit(String Str, int addr, int num) {
		StringBuilder str = new StringBuilder(Str);
		char Arr[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };

		for (int j = 0; j < num; j++) {
			int i = 0;
			while (i < 16) {
				if (str.charAt(addr) == Arr[i]) {
					break;
				}
				i++;
			}
			str.setCharAt(addr, Arr[15 - i]);
			addr++;
		}
		return str.toString();
	}

	static String hexToBinary(String hex) {

		// variable to store the converted
		// Binary Sequence
		String binary = "";

		// converting the accepted Hexadecimal
		// string to upper case
		hex = hex.toUpperCase();

		// initializing the HashMap class
		HashMap<Character, String> hashMap = new HashMap<Character, String>();

		// storing the key value pairs
		hashMap.put('0', "0000");
		hashMap.put('1', "0001");
		hashMap.put('2', "0010");
		hashMap.put('3', "0011");
		hashMap.put('4', "0100");
		hashMap.put('5', "0101");
		hashMap.put('6', "0110");
		hashMap.put('7', "0111");
		hashMap.put('8', "1000");
		hashMap.put('9', "1001");
		hashMap.put('A', "1010");
		hashMap.put('B', "1011");
		hashMap.put('C', "1100");
		hashMap.put('D', "1101");
		hashMap.put('E', "1110");
		hashMap.put('F', "1111");

		int i;
		char ch;

		// loop to iterate through the length
		// of the Hexadecimal String
		for (i = 0; i < hex.length(); i++) {
			// extracting each character
			ch = hex.charAt(i);

			// checking if the character is
			// present in the keys
			if (hashMap.containsKey(ch))

				// adding to the Binary Sequence
				// the corresponding value of
				// the key
				binary += hashMap.get(ch);

			// returning Invalid Hexadecimal
			// String if the character is
			// not present in the keys
			else {
				binary = "Invalid Hexadecimal String";
				return binary;
			}
		}

		// returning the converted Binary
		return binary;
	}
}