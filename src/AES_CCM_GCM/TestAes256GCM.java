package AES_CCM_GCM;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.HashMap;

public class TestAes256GCM {

	// Pre-configured Encryption Parameters
	public static int NonceBitSize = 128;
	public static int MacBitSize = 128;
//	public static String encryptedText;

	/* Transform a byte array in an hexadecimal string */
	private static String toHex(byte[] data) {
		StringBuilder sb = new StringBuilder();
		for (byte b : data) {
			sb.append(String.format("%02x", b & 0xff));
		}
		return sb.toString();
	}

	/*
	 * Transform an hexadecimal string in byte array (It works if the string only
	 * contains the hexadecimal characters)
	 */
	private static byte[] hexStringToByteArray(String s) {
		int len = s.length();
		byte[] data = new byte[len / 2];
		for (int i = 0; i < len; i += 2) {
			data[i / 2] = (byte) ((Character.digit(s.charAt(i), 16) << 4) + Character.digit(s.charAt(i + 1), 16));
		}
		return data;
	}

	/* Convert a string representation in its hexadecimal string */
	private static String toHex(String arg) {
		return String.format("%02x", new BigInteger(1, arg.getBytes()));
	}

	/* Perform SHA256 and return the result */
	private static byte[] sha256(byte[] data) {
		SHA256Digest digest = new SHA256Digest();
		byte[] hash = new byte[digest.getDigestSize()];
		digest.update(data, 0, data.length);
		digest.doFinal(hash, 0);
		return hash;
	}

	static float CompareBit(String Str1, String Str2) {
		float Count = 0, a;
		if (Str1.length() == Str2.length()) {
			for (int i = 0; i < Str1.length(); i++) {
				if (Str1.charAt(i) == Str2.charAt(i))
					++Count;
			}
		} else {
			System.out.println("Length Str1 != Str2!");
		}
		a = ((Str1.length()-Count) / (Str1.length())) * 100;
		//System.out.println("so ki tu khac nhau: " + (Str1.length()-Count));
		//System.out.println("tong so ki tu: " + Str1.length());
		//System.out.println("ty le thay doi ban ma: " + a);
		System.out.println(a);
		return a;
	}

	// num la so bit can thay num*4=so bit can thay. addr la vi tri bat dau thay
	static String ChangeAddBit(String Str, int addr, int num) {
		StringBuilder str = new StringBuilder(Str);
		char Arr[] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' };
		
		for (int j = 0; j < num; j++) {
			int i = 0;
			while (i < 16) {
				if (str.charAt(addr) == Arr[i]) {
					break;
				}
				i++;
			}
			str.setCharAt(addr, Arr[15 - i]);
			addr++;
		}
		return str.toString();
	}

	static String hexToBinary(String hex)
    {
 
        // variable to store the converted
        // Binary Sequence
        String binary = "";
 
        // converting the accepted Hexadecimal
        // string to upper case
        hex = hex.toUpperCase();
 
        // initializing the HashMap class
        HashMap<Character, String> hashMap
            = new HashMap<Character, String>();
 
        // storing the key value pairs
        hashMap.put('0', "0000");
        hashMap.put('1', "0001");
        hashMap.put('2', "0010");
        hashMap.put('3', "0011");
        hashMap.put('4', "0100");
        hashMap.put('5', "0101");
        hashMap.put('6', "0110");
        hashMap.put('7', "0111");
        hashMap.put('8', "1000");
        hashMap.put('9', "1001");
        hashMap.put('A', "1010");
        hashMap.put('B', "1011");
        hashMap.put('C', "1100");
        hashMap.put('D', "1101");
        hashMap.put('E', "1110");
        hashMap.put('F', "1111");
 
        int i;
        char ch;
 
        // loop to iterate through the length
        // of the Hexadecimal String
        for (i = 0; i < hex.length(); i++) {
            // extracting each character
            ch = hex.charAt(i);
 
            // checking if the character is
            // present in the keys
            if (hashMap.containsKey(ch))
 
                // adding to the Binary Sequence
                // the corresponding value of
                // the key
                binary += hashMap.get(ch);
 
            // returning Invalid Hexadecimal
            // String if the character is
            // not present in the keys
            else {
                binary = "Invalid Hexadecimal String";
                return binary;
            }
        }
 
        // returning the converted Binary
        return binary;
    }

	public static void main(String[] args) {

		// using above code these key and iv was generated
//		String hexKey = "2192B39425BBD08B6E8E61C5D1F1BC9F428FC569FBC6F78C0BC48FCCDB0F42AE";
		String kzz = "5f5e1f20b4a333f8cdf1f04251ac0f93300bf1a9ce5b5436cd4b47b0c6a1ffab";
		byte[] kz = hexStringToByteArray(kzz);
		byte[] Kz = sha256(kz);

//		String hexIV = "E1E592E87225847C11D948684F3B070D";
//		String nonces = "bf782587a8672d2e6ce0d161";
//		byte[] nonce = sha256(hexStringToByteArray(nonces));
//		System.out.println("nonce : " + toHex(nonce));
		SecureRandom random = new SecureRandom();
		byte[] nonce = new byte[12];
		random.nextBytes(nonce); // Fill the nonce with random bytes

		random = new SecureRandom();
		byte[] plainText = new byte[256];
		random.nextBytes(plainText);

		String cleartext = toHex(toHex(plainText));

//		float total = 0;
//		float total1 = 0;
//		for (int i = 0; i < 10000; i++) {
//			System.out.println("i: " + i);
//			long nano_startTime = System.nanoTime();
//			String encryptedText = AesGcm256.encrypt(cleartext, Kz, nonce);
//			long nano_endTime = System.nanoTime();
//			System.out.println("Time taken in nano seconds encrypt: " + (nano_endTime - nano_startTime));
//			//System.out.println("encrypt: "+toHex(toHex(encryptedText)));
//			
//			long nano_startTime1 = System.nanoTime();
//			String decryptedText = AesGcm256.decrypt(encryptedText, Kz, nonce);
//			long nano_endTime1 = System.nanoTime();
//			if (i != 0) {
//				total += (nano_endTime - nano_startTime);
//				total1 += (nano_endTime1 - nano_startTime1);
//			}
//			 System.out.println("Time taken in nano seconds decrypt: " + (nano_endTime1 - nano_startTime1));
//			 System.out.println("decrypt: "+(decryptedText));
//		}
		

		float total = 0;
		float total1 = 0;
		for (int i = 0; i < 20000; i++) {
			System.out.println("i: " + i);
			long nano_startTime = System.nanoTime();
			byte[] encryptedText = AesGcm256.encrypt(plainText, Kz, nonce);
			long nano_endTime = System.nanoTime();
			System.out.println("Time taken in nano seconds encrypt: " + (nano_endTime - nano_startTime));
			// System.out.println("encrypt: "+toHex(toHex(encryptedText)));

			long nano_startTime1 = System.nanoTime();
			byte[] decryptedText = AesGcm256.decrypt(encryptedText, Kz, nonce);
			long nano_endTime1 = System.nanoTime();
			if (i != 0) {
				total += (nano_endTime - nano_startTime);
				total1 += (nano_endTime1 - nano_startTime1);
			}
			System.out.println("Time taken in nano seconds decrypt: " + (nano_endTime1 - nano_startTime1));
			System.out.println("decrypt: " + toHex(toHex(decryptedText)));
		}

		System.out.println("plainText: "+toHex(toHex(plainText)));
		System.out.println("\nmedium time encrypt: " + total / 19999);
		System.out.println("\nmedium time decrypt: " + total1 / 19999);
	}


//	public static void main(String[] args) {
//
//		/* Plaintext change 8bit*/
//		String kzz = "5f5e1f20b4a333f8cdf1f04251ac0f93300bf1a9ce5b5436cd4b47b0c6a1ffab";
//		byte[] Kz = hexStringToByteArray(kzz);
////		byte[] Kz = sha256(kz);
////		byte[] Kz;
//		
////		SecureRandom random = new SecureRandom();
////		byte[] nonce = new byte[12];
////		random.nextBytes(nonce); // Fill the nonce with random bytes
//		String nonce ="6431b30b0d3ae2b9e4853968";
//		
//		
//		String cleartext1 = "74656d70657261747572657c7c73696c7665727c7c633035303165376563343064363637383862996437399235353035393564376234373162663134643431646362623139633732653536333064323935383032657c7c39353832376162343832643766306532363431356638656262333532646163397c7c34306432653930363638303435386534376232356431373038363164336463346362313932616436353433366162306239643738653233383061623863626630";
//		String binary = "010011110101101001101000010000010111101001110010001110010010111101011000001011110100010000101111011010100110011100111001001110000101010001101011010100110011000001010001011100110110011001110010010001010011011101000001011001100110110101110001011010000110110001001101011001110100000101110111010101010111011001110111011110000011010001100111011010100010101101111000011010100100110001011000011001110111001001110100011011010111000001000001011010010111010101110101010100100101000101101111010001110110011100101011001100000111100101101011001110010100100101010100001101010100101101101000011011110111001000110000010000110100110000110000010101000011000001110010001100010011011000110110010000110111001000101011001100010111100100101011010101100100110000110100011000010110100000110110010011010100111101010010001011110011100101100110011100010111100001110111011001000110101001010011001100010100110101010011011011100111011101101001001101010100011001010101010100000011100000111000011101110110110001011000011110010011010001010111010101010011100101110101001101010110011101100011010010110100011101100100011001010111000101000001011001100110001101101110001110010011010001000001011100000110100101110001001100010110001001100111011011100011100001001010010000010011010101101000010100100011010001010100011010000110101001100100010011010011001101000101011010010100100100101111010101110100101101011010010001110100010001001101011100100110111001101010010110100111010001101111011110100110111000110110011101110100001101110011011001000010101101001101011101110110100101100010010000100100110001111001001110010110011001001110010001100111101001011010011011010101010001101000010011010101001001000111001101110110000101000010011000110010101101110111010101010101000101010011010011010101011001001101010011110110110001110100001011110010101101000101011011000110010001110101001100100110110001010010011101010100101001100101001101010110011100110010001101110100011001110010011010000111010101111000001101010101000100110100010101000111100001001101010101110100101101000111011000010101011101111010010011100100111101110010010110000101001001100101010000010110111001010100001100010111100101101011011010110111001100111000011011110011010000101111010001100100010101001111011000010100011101100011010010110110110101100101010000110101001101111001011100100101101001001000011000110111100001010011011010100111001101111001010011110100001100110101011100100100101001111001011010010111100001110100011011010110011001100011011101010101001001101001010100100110010101010111010100110110101001110100011101000110101001010101010010110100010101001010010101110100010001101001010000010100011101101101010010110101010001101111010101000111000101110101001101110101001000110011011010100111001101100011011000100110010101000001011001010100100101101111011000010011100101100011010100000010111101010111001011110100010001110001010001000110101101000011010100100101001100110010011010110111010101110011011110010110110001101100010011110111011100101011011100100101100001001010010010010110011000110100010010000100001100110110011001110101010101100010010011100010101101101000010101010110111101011001010011100010111100111001010100010100100001110110010010110111000001101111010010010011001100111001010101110101101001110011011000100011001101100100011110100100110101110000010100110100001101011000011010110110101001100010011010110111000101001101010011110111101001001011010101010110001101001011011001010100100001100110011000110011010101100011011101000111000101100011001101010101001001000101010001100111000100110111011101100100000100110011010110010100110101001110010010000011010100101111011011000011001101010111011011100111001001100001010110010100000101001011011110000111000101110110001100110100011001111001001011110110101001011000011100100100101001000101010100110011010001110100011100010110101001001011011011000100010001001010010010000111010000110000011100000101001000110000010011010100011101100111011001100111011000110111010110000101001101110110011010110100110001110101011010000100100001000111001011110111000101010110001110000110100101110011011101010011010000110011011100110111100101000111010101110110100101111010011100100111001100111101";
//		String hex ="4e7335417a72392f582f442f6a673938546b533051736672453741666d71686c4d6741775576777834676a2b786a4c586772746d704169757552516f47672b30796b394954354b686f7230434c3054307231363643722b31792b564c346168364d4f522f3966717877646a53314d536e7769354655503838776c587934575539753567634b476465714166636e3934417069713162676e384a413568523454686a644d334569492f574b5a47444d726e6a5a746f7a6e36774373642b4d776962424c7939664e467a5a6d54684d5247376142632b775551534d564d4f6c742f2b456c6475326c52754a6535673237467268757835513454784d574b4761577a4e4f72585265416e5431796b6b73386f342f46454f6147634b6d65435379725a486378536a73794f4335724a796978746d6663755269526557536a74746a554b454a57446941476d4b546f5471753752336a736362654165496f613963502f572f4471446b435253326b7573796c6c4f772b72584a4966344843366755624e2b68556f594e2f395148764b706f493339575a736233647a4d705343586b6a626b714d4f7a4b55634b654866633563747163355245467137764133594d4e48352f6c33576e726159414b7871763346792f6a58724a45533474716a4b6c444a4874307052304d47676676375853766b47557376742b316b4e6e2b2f56375757706e534f67493d";
//		float total=0;
//		String cleartext;
//		for(int i=0;i<1;i++) {
//			cleartext = ChangeAddBit(cleartext1,i,2);
////			cleartext = cleartext1;
////			System.out.println("cleartext: "+cleartext);
////			Kz = hexStringToByteArray(ChangeAddBit(kzz,i,2));
//			String encryptedText = AesGcm256.encrypt(cleartext, Kz, hexStringToByteArray(nonce));
////			System.out.println("encrypt to hex: "+toHex(encryptedText));
//			System.out.println("ciphertext: "+(encryptedText));
////			String ciphertextHex = hexToBinary((toHex(encryptedText)));
////			System.out.println("ciphertextHex length: "+cipherextHex.length());
////			System.out.println("ciphertextHex binary: "+ciphertextHex);
////			total +=CompareBit(ciphertextHex,binary);
////			total +=CompareBit(toHex(encryptedText),hex);
//			i++;
//		}
////		System.out.println("trung binh: "+total/5);
//		
//
//		
////		/* Key change 8bit*/
////		String kzz = "5f5e1f20b4a333f8cdf1f04251ac0f93300bf1a9ce5b5436cd4b47b0c6a1ffab";
////		byte[] Kz;
////		
//////		SecureRandom random = new SecureRandom();
//////		byte[] nonce = new byte[12];
//////		random.nextBytes(nonce); // Fill the nonce with random bytes
////		String nonce ="6431b30b0d3ae2b9e4853968";
////		
////		
////		String cleartext1 = "74656d70657261747572657c7c73696c7665727c7c633035303165376563343064363637383862996437399235353035393564376234373162663134643431646362623139633732653536333064323935383032657c7c39353832376162343832643766306532363431356638656262333532646163397c7c34306432653930363638303435386534376232356431373038363164336463346362313932616436353433366162306239643738653233383061623863626630";
////		String binary
////		String hex = "4e7335417a72392f582f442f6a673938546b533051736672453741666d71686c4d6741775576777834676a2b786a4c586772746d704169757552516f47672b30796b394954354b686f7230434c3054307231363643722b31792b564c346168364d4f522f3966717877646a53314d536e7769354655503838776c587934575539753567634b476465714166636e3934417069713162676e384a413568523454686a644d334569492f574b5a47444d726e6a5a746f7a6e36774373642b4d776962424c7939664e467a5a6d54684d5247376142632b775551534d564d4f6c742f2b456c6475326c52754a6535673237467268757835513454784d574b4761577a4e4f72585265416e5431796b6b73386f342f46454f6147634b6d65435379725a486378536a73794f4335724a796978746d6663755269526557536a74746a554b454a57446941476d4b546f5471753752336a736362654165496f613963502f572f4471446b435253326b7573796c6c4f772b72584a4966344843366755624e2b68556f594e2f395148764b706f493339575a736233647a4d705343586b6a626b714d4f7a4b55634b654866633563747163355245467137764133594d4e48352f6c33576e726159414b7871763346792f6a58724a45533474716a4b6c444a4874307052304d47676676375853766b47557376742b316b4e6e2b2f56375757706e534f67493d";
////		float total=0;
////		for(int i=0;i<64;i++) {
//////			Kz = hexStringToByteArray(kzz);
////			Kz = hexStringToByteArray(ChangeAddBit(kzz,i,2));
////			String encryptedText = AesGcm256.encrypt(cleartext1, Kz, hexStringToByteArray(nonce));
//////			System.out.println("ciphertextHex binary: "+toHex(encryptedText));
////			String ciphertextHex = hexToBinary((toHex(encryptedText)));
//////			System.out.println("ciphertextHex binary: "+ciphertextHex);
//////			total +=CompareBit(ciphertextHex,binary);
////			total +=CompareBit(toHex(encryptedText),hex);
////			i++;
////		}
////		
//////		String decryptedText = AesGcm256.decrypt(encryptedText, Kz, hexStringToByteArray(nonce));
//////		System.out.println("decrypt: " + toHex(toHex(decryptedText)));
//		
//		
//		
//		
//	}

}
